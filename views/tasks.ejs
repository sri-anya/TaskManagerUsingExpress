<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Task Manager</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">

</head>

<body>
  <!-- NavBar -->
  <nav class="navbar bg-dark border-bottom border-body" data-bs-theme="dark">
    <div class="container-fluid">
      <a href="/" class="navbar-brand">Task Manager</a>
      <a href="/about" class="navbar-brand">About</a>
    </div>
  </nav>
  <!-- Add new task -->

  <div class="newTask" style="width:50%; margin:auto; padding-top: 35px; text-align: center;">
    <h1>Add a new Task</h1>
    <form id="newTaskForm">
      <div class="form-floating my-2">
        <textarea class="form-control" placeholder="taskName" name="taskName" id="taskName"></textarea>
        <label for="taskName">Task Title</label>
      </div>
      <div class="form-floating my-2">
        <textarea class="form-control" placeholder="description" name="description" id="description"
          style="height: 100px"></textarea>
        <label for="description">Description</label>
      </div>
      <div class="form-floating my-2">
        <input class="form-control" type="date" id="dueDate" name="dueDate" value="2024-02-08" min="2024-02-08"
          max="2024-12-31" />
        <label for="dueDate">Due Date</label>
      </div>
      <div class="submitButton my-4">
        <button class="btn btn-primary" id="submit" type="submit">Submit Task</button>
      </div>
    </form>
  </div>




  <hr>
  <!-- CardContainer -->
  <div class="taskContainer" style="text-align: center;">
    <h1>Tasks</h1>
    <ul class="list-group" id="taskList" style="margin:20px;">



    </ul>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
    crossorigin="anonymous"></script>

  <script>

    console.log("script")

    const taskList = document.getElementById('taskList');

    function deleteTask(taskId) {
      console.log(taskId)
      console.log(`taskTobe deleted: ${document.getElementById(taskId)}`)
      document.getElementById(taskId).style.display = 'none';

      fetch(`/${taskId}`, {
        method: 'DELETE'
      })
        .then(res => res.text())
        .then(res => console.log(res))
        .catch(error => console.error('Error deleting task:', error));
    }




    function detailsOfTask(taskd) {

      console.log(`task to get details: ${document.getElementById(taskd)}`)
      console.log(taskd)
    }


    // Function to fetch and display tasks
//     const fetchTasks = (task) => {

//       // Clear existing tasks
//       taskList.innerHTML += `<li class="list-group-item" style="display: flex; justify-content: space-around" id="${task.id}">
         
//           <label class="form-check-label" for="${task.taskName}">
//             ${task.taskName}
//           </label>
//           <label class="form-check-label" for="${task.description}">
//             ${task.description}
//           </label>
//           <label class="form-check-label" for="${task.dueDate}">
//             ${task.dueDate}
//           </label>
//           <button type="button" style="display: block" class="btn btn-danger" onclick="(function('task.id') {
//   console.log(task.id);
//   document.getElementById(taskId).style.display = 'none';
//   fetch(`/${task.id}`, {
//   method: 'DELETE'
// })
//     .then(res => res.text())
//     .then(res => console.log(res))
//     .catch(error => console.error('Error deleting task:', error));
// })('yourTaskId')">
//   Delete
// </button>
//           <button type="button" style="display:block" class="btn btn-info" onclick="detailsOfTask('${task.id}')"</button>Details</button>
         
//           </li>
          
//           `;



//     };


const fetchTasks = (task) => {
  // Clear existing tasks
  let li = document.createElement('li');
  li.className = "list-group-item";
  li.style.display = "flex";
  li.style.justifyContent = "space-around";
  li.id = task.id;

  li.innerHTML = `
    <label class="form-check-label" for="${task.taskName}">${task.taskName}</label>
    <label class="form-check-label" for="${task.description}">${task.description}</label>
    <label class="form-check-label" for="${task.dueDate}">${task.dueDate}</label>
  `;

  // Append the list item to the taskList
  taskList.appendChild(li);

 
};

    document.getElementById("newTaskForm").addEventListener("submit", async (e) => {
      e.preventDefault()

      const taskData = {
        taskName: document.getElementById('taskName').value,
        description: document.getElementById('description').value,
        dueDate: document.getElementById('dueDate').value,

      };
      // try {
      //   // Send a POST request to create a new task
      //   await axios.post('/', taskData);

      //   // Fetch and display updated tasks

      //   fetchTasks(taskData);

      //   // Reset the form after submit
      //   document.getElementById("newTaskForm").reset()

      // } catch (error) {
      //   console.error('Error creating task:', error);
      // }

      try {
        // Send a POST request to create a new task using Fetch API
        const response = await fetch('/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(taskData)
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        // Fetch and display updated tasks
        fetchTasks(taskData);

        // Reset the form after submit
        document.getElementById("newTaskForm").reset();
      } catch (error) {
        console.error('Error creating task:', error);
      }

    })


  </script>

</body>

</html>